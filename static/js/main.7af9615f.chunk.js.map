{"version":3,"sources":["App.js","index.js"],"names":["App","useState","posts","setPosts","loading","setloading","page","fetchPosts","a","fetch","response","json","data","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","console","log","setTimeout","useEffect","setFilteredArr1","addEventListener","removeEventListener","loader","className","value","setValue","filteredArr1","filterPosts","match","filteredArr","filter","post","title","indexOf","body","scrollBtn","onClick","scrollTo","top","behavior","type","placeholder","onChange","e","target","map","id","ReactDOM","render","StrictMode","getElementById"],"mappings":"uPA+HeA,MA7Hf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAGIC,EAAO,EAELC,EAAU,uCAAG,8BAAAC,EAAA,6DACjBH,GAAW,GADM,SAEMI,MAAM,qDAAD,OALlB,EAKkB,kBAC0CH,IAHrD,cAEXI,EAFW,gBAKEA,EAASC,OALX,OAKXC,EALW,OAMjBT,GAAS,SAACD,GAAD,4BAAeA,GAAf,YAAyBU,OAClCP,GAAW,GAPM,2CAAH,qDA0BhB,SAASQ,IAELC,OAAOC,YAAcC,SAASC,gBAAgBC,YAC9CF,SAASC,gBAAgBE,eAGvBf,IACJC,GAAW,GACXe,QAAQC,IAAI,0BACRjB,GACCA,GACHkB,YAAW,WAfbhB,IACAC,MAgBK,OA5BPgB,qBAAU,WACRhB,MACC,IAGHgB,qBAAU,WACRC,EAAgBtB,KACf,CAACA,IAyBJqB,qBAAU,WAER,OADAT,OAAOW,iBAAiB,SAAUZ,GAC3B,kBAAMC,OAAOY,oBAAoB,SAAUb,MACjD,IAEH,IAAMc,EACJ,sBAAKC,UAAU,SAAf,UACE,qBAAKA,UAAU,WACf,qBAAKA,UAAU,WACf,qBAAKA,UAAU,cAKnB,EAA0B3B,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcC,EAAd,KACA,EAAwC7B,mBAAS,IAAjD,mBAAO8B,EAAP,KAAqBP,EAArB,KASMQ,EAAc,WAGlB,GAA2B,OAAvBH,EAAMI,MADE,SACqB,CAC/B,IAAIC,EAAchC,EAAMiC,QACtB,SAACC,GAAD,OACEA,EAAKC,MAAMC,QAAQT,IAAU,GAAKO,EAAKG,KAAKD,QAAQT,IAAU,KAElEL,EAAgBU,KASdM,EACJ,qBAAKZ,UAAU,YAAYa,QALX,WAChB3B,OAAO4B,SAAS,CAAEC,IAAK,EAAGC,SAAU,YAIpC,oBAKF,OACE,sBAAKhB,UAAU,MAAf,UACE,0DACA,qBAAKA,UAAU,mBAAf,SACE,uBACEiB,KAAK,OACLC,YAAY,kBACZjB,MAAOA,EACPkB,SAtCa,SAACC,GACpBlB,EAASkB,EAAEC,OAAOpB,OAClBG,IAEAZ,QAAQC,IAAIQ,EAAMI,MADN,eAsCV,qBAAKL,UAAU,kBAAf,SACGG,EAAamB,KAAI,SAACd,GACjB,OACE,0BAAuBR,UAAU,OAAjC,UACE,sBAAMA,UAAU,cAAhB,SAA+BQ,EAAKe,KACpC,6BAAKf,EAAKC,QACV,4BAAID,EAAKG,SAHGH,EAAKe,SAQxBX,EACApC,GAAWuB,MCrHlByB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASuC,eAAe,W","file":"static/js/main.7af9615f.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n  const [loading, setloading] = useState(false);\n\n  let limit = 5;\n  let page = 1;\n\n  const fetchPosts = async () => {\n    setloading(true);\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/posts?_limit=${limit}&_page=${page}`\n    );\n    const data = await response.json();\n    setPosts((posts) => [...posts, ...data]);\n    setloading(false);\n  };\n\n  // Initial fetch of first posts\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  // Pass fetched posts into filtered array\n  useEffect(() => {\n    setFilteredArr1(posts);\n  }, [posts]);\n\n  // Fetch on scroll to bottom\n  const loadMorePosts = () => {\n    page++;\n    fetchPosts();\n  };\n\n  function handleScroll() {\n    if (\n      window.innerHeight + document.documentElement.scrollTop !==\n      document.documentElement.offsetHeight\n    )\n      return;\n    if (loading) return;\n    setloading(true);\n    console.log(\"Fetch more list items!\");\n    if (loading) return;\n    if (!loading) {\n      setTimeout(() => {\n        loadMorePosts();\n      }, 1000);\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const loader = (\n    <div className=\"loader\">\n      <div className=\"circle\"></div>\n      <div className=\"circle\"></div>\n      <div className=\"circle\"></div>\n    </div>\n  );\n\n  // Filter posts by input\n  const [value, setValue] = useState(\"\");\n  const [filteredArr1, setFilteredArr1] = useState([]);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    filterPosts();\n    var regex = /^\\s+$/;\n    console.log(value.match(regex));\n  };\n\n  const filterPosts = () => {\n    // If no empty string in input then filter input text\n    var regex = /^\\s+$/;\n    if (value.match(regex) === null) {\n      let filteredArr = posts.filter(\n        (post) =>\n          post.title.indexOf(value) > -1 || post.body.indexOf(value) > -1\n      );\n      setFilteredArr1(filteredArr);\n    }\n  };\n\n  // Scroll to top\n  const scrollTop = () => {\n    window.scrollTo({ top: 0, behavior: \"smooth\" });\n  };\n\n  const scrollBtn = (\n    <div className=\"scrollBtn\" onClick={scrollTop}>\n      to top\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Infinite Scroll & Filter</h1>\n      <div className=\"filter-container\">\n        <input\n          type=\"text\"\n          placeholder=\"filter posts...\"\n          value={value}\n          onChange={handleChange}\n        />\n      </div>\n      <div className=\"posts-container\">\n        {filteredArr1.map((post) => {\n          return (\n            <article key={post.id} className=\"post\">\n              <span className=\"post-number\">{post.id}</span>\n              <h3>{post.title}</h3>\n              <p>{post.body}</p>\n            </article>\n          );\n        })}\n      </div>\n      {scrollBtn}\n      {loading && loader}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}